geom_bar(mapping = aes(y = (..count..)/sum(..count..))) +
geom_text(mapping = aes(label = scales::percent((..count..)/sum(..count..)),y = (..count..)/sum(..count..) ), stat = "count",vjust = -.1) +
scale_fill_manual(values=c("darkolivegreen", "darkmagenta"))
labs(x = "month",  y = "Transaction") +
scale_y_continuous()
ggplot(data = Bread_df, mapping = aes(x = month, y = Transaction)) +
geom_bar(mapping = aes(y = (..count..)/sum(..count..))) +
geom_text(mapping = aes(label = scales::percent((..count..)/sum(..count..)),y = (..count..)/sum(..count..) ), stat = "count",vjust = -.1) +
scale_fill_manual(values=c(rainbow(7)))+
labs(x = "month",  y = "Transaction") +
scale_y_continuous()
# Transactions per month
ggplot(data = Bread_df, mapping = aes(x = month, y = Transaction)) +
geom_bar(mapping = aes(y = (..count..)/sum(..count..))) +
geom_text(mapping = aes(label = scales::percent((..count..)/sum(..count..)),y = (..count..)/sum(..count..) ), stat = "count",vjust = -.1) +
labs(x = "month",  y = "Transaction", fill(rainbow(7))) +
scale_y_continuous()
# Transactions per month
ggplot(data = Bread_df, mapping = aes(x = month, y = Transaction)) +
geom_bar(mapping = aes(y = (..count..)/sum(..count..))) +
scale_fill_manual(values=c(rainbow(7)))+
geom_text(mapping = aes(label = scales::percent((..count..)/sum(..count..)),y = (..count..)/sum(..count..) ), stat = "count",vjust = -.1) +
labs(x = "month",  y = "Transaction") +
scale_y_continuous()
# Transactions per month
ggplot(data = Bread_df, mapping = aes(x = month, y = Transaction)) +
geom_bar(mapping = aes(y = (..count..)/sum(..count..)),col=rainbow(7)) +
geom_text(mapping = aes(label = scales::percent((..count..)/sum(..count..)),y = (..count..)/sum(..count..) ), stat = "count",vjust = -.1) +
labs(x = "month",  y = "Transaction") +
scale_y_continuous()
# Transactions per month
ggplot(data = Bread_df, mapping = aes(x = month, y = Transaction),,col=rainbow(7)) +
geom_bar(mapping = aes(y = (..count..)/sum(..count..))) +
geom_text(mapping = aes(label = scales::percent((..count..)/sum(..count..)),y = (..count..)/sum(..count..) ), stat = "count",vjust = -.1) +
labs(x = "month",  y = "Transaction") +
scale_y_continuous()
# Transactions per month
ggplot(data = Bread_df, mapping = aes(x = month, y = Transaction),col=rainbow(7)) +
geom_bar(mapping = aes(y = (..count..)/sum(..count..))) +
geom_text(mapping = aes(label = scales::percent((..count..)/sum(..count..)),y = (..count..)/sum(..count..) ), stat = "count",vjust = -.1) +
labs(x = "month",  y = "Transaction") +
scale_y_continuous()
Bread_df <- read.csv("F:/Salford Uni/CourseWork/ASDM/Task 2/bread basket.csv")
Bread_df$month <- as.factor(Bread_df$month)
# Breaking down date_time column in date column, time coulumn, year column, month column and day column
temp <- as.POSIXlt(Bread_df$date_time, format="%d-%m-%Y %H:%M")
Bread_df$year <- year(temp)
Bread_df$month <- month(temp)
Bread_df <- read.csv("F:/Salford Uni/CourseWork/ASDM/Task 2/bread basket.csv")
dim(Bread_df)
str(Bread_df)
summary(Bread_df)
Bread_df[,colSums(is.na(Bread_df)) > 0]
# Ten most popular items sold by the bakery
x <- as.data.frame(plyr::count(Bread_df, 'Item'))
x <- x %>% arrange(desc(freq))
# Importing Required Libraries
library(dplyr)
library(plyr)
library(ggplot2)
library(arules)
library(arulesViz)
library(knitr)
library(tidyverse)
library(lubridate)
library(gridExtra)
library(data.table)
# Loading the Dataset
Bread_df <- read.csv("F:/Salford Uni/CourseWork/ASDM/Task 2/bread basket.csv")
dim(Bread_df)
str(Bread_df)
summary(Bread_df)
Bread_df[,colSums(is.na(Bread_df)) > 0]
# Ten most popular items sold by the bakery
x <- as.data.frame(plyr::count(Bread_df, 'Item'))
x <- x %>% arrange(desc(freq))
x[1:10,]
# Most popular period of day for bakery sale
y <- as.data.frame(plyr::count(Bread_df, 'period_day'))
y <- y %>% arrange(desc(freq))
y
# Breaking down date_time column in date column, time coulumn, year column, month column and day column
temp <- as.POSIXlt(Bread_df$date_time, format="%d-%m-%Y %H:%M")
Bread_df$year <- year(temp)
Bread_df$month <- month(temp)
Bread_df$date <- date(temp)
Bread_df$time <- as.ITime(temp, format = "%H:%M")
Bread_df$day <- weekdays(date(temp))
Bread_df$month <- month.abb[Bread_df$month]
head(Bread_df)
Bread_df$month <- as.factor(Bread_df$month)
Bread_df$Date <- as.Date(Bread_df$date)
# Transactions per month
ggplot(data = Bread_df, mapping = aes(x = month, y = Transaction),fil=rainbow(7)) +
geom_bar(mapping = aes(y = (..count..)/sum(..count..))) +
geom_text(mapping = aes(label = scales::percent((..count..)/sum(..count..)),y = (..count..)/sum(..count..) ), stat = "count",vjust = -.1) +
labs(x = "month",  y = "Transaction") +
scale_y_continuous()
# Transactions per month
ggplot(data = Bread_df, mapping = aes(x = month, y = Transaction)) +
geom_bar(mapping = aes(y = (..count..)/sum(..count..)),fil=rainbow(7)) +
geom_text(mapping = aes(label = scales::percent((..count..)/sum(..count..)),y = (..count..)/sum(..count..) ), stat = "count",vjust = -.1) +
labs(x = "month",  y = "Transaction") +
scale_y_continuous()
# Transactions per month
ggplot(data = Bread_df, mapping = aes(x = month, y = Transaction)) +
geom_bar(mapping = aes(y = (..count..)/sum(..count..))) +
geom_text(mapping = aes(label = scales::percent((..count..)/sum(..count..)),y = (..count..)/sum(..count..) ), stat = "count",vjust = -.1) +
labs(x = "month",  y = "Transaction",fil=rainbow(7)) +
scale_y_continuous()
ggplot(Bread_df, aes(x=month, fill = Transactions)) +
scale_fill_manual(values=c(rainbow(7)))+
geom_bar(position = "dodge") +
ggtitle("Transaction Data for Weekday and Weekend")
ggplot(Bread_df, mapping = aes(x = month, y = Transaction)) +
scale_fill_manual(values=c(rainbow(7)))+
geom_bar(position = "dodge") +
ggtitle("Transaction Data for Weekday and Weekend")
ggplot(data = Bread_df, mapping = aes(x = month, y = Transaction)) +
geom_bar(mapping = aes(y = (..count..)/sum(..count..))) +
scale_fill_manual(values=c(rainbow(7)))+
geom_text(mapping = aes(label = scales::percent((..count..)/sum(..count..)),y = (..count..)/sum(..count..) ), stat = "count",vjust = -.1) +
labs(x = "month",  y = "Transaction") +
scale_y_continuous()
# Transactions per month
ggplot(data = Bread_df, mapping = aes(x = month, y = Transaction),col="red") +
geom_bar(mapping = aes(y = (..count..)/sum(..count..))) +
geom_text(mapping = aes(label = scales::percent((..count..)/sum(..count..)),y = (..count..)/sum(..count..) ), stat = "count",vjust = -.1) +
labs(x = "month",  y = "Transaction") +
scale_y_continuous()
ggplot(data = Bread_df, mapping = aes(x = month, y = Transaction),col="red") +
geom_bar() +
geom_text(mapping = aes(label = scales::percent((..count..)/sum(..count..)),y = (..count..)/sum(..count..) ), stat = "count",vjust = -.1) +
labs(x = "month",  y = "Transaction") +
scale_y_continuous()
ggplot(Bread_df, aes(x = month, fill = Transaction)) +
geom_density(alpha = 0.8) +
scale_fill_manual(values=c("deeppink4","lightsalmon"))+
ggtitle("No Significant Difference in fnlwgt") +
labs(y = NULL)
Bread_df %>%
mutate(Month=as.factor(month(Date))) %>%
group_by(Month) %>%
summarise(Transactions=n_distinct(Transaction)) %>%
ggplot(aes(x=Month, y=Transactions)) +
geom_bar(stat="identity", fill="mistyrose2", show.legend=FALSE, colour="black") +
geom_label(aes(label=Transactions)) +
labs(title="Transactions per month") +
theme_bw()
Bread_df %>%
group_by(month) %>%
summarise(Transactions=n_distinct(Transaction)) %>%
ggplot(aes(x=Month, y=Transactions)) +
geom_bar(stat="identity", fill="mistyrose2", show.legend=FALSE, colour="black") +
geom_label(aes(label=Transactions)) +
labs(title="Transactions per month") +
theme_bw()
Bread_df %>%
group_by(Bread_df$month) %>%
summarise(Transactions=n_distinct(Transaction)) %>%
ggplot(aes(x=Month, y=Transactions)) +
geom_bar(stat="identity", fill="mistyrose2", show.legend=FALSE, colour="black") +
geom_label(aes(label=Transactions)) +
labs(title="Transactions per month") +
theme_bw()
View(Bread_df)
View(Bread_df)
Bread_df %>%
mutate(Month=as.factor(Bread_df$month(date))) %>%
group_by(Bread_df$month) %>%
summarise(Transactions=n_distinct(Transaction)) %>%
ggplot(aes(x=Bread_df$month, y=Transactions)) +
geom_bar(stat="identity", fill="mistyrose2", show.legend=FALSE, colour="black") +
geom_label(aes(label=Transactions)) +
labs(title="Transactions per month") +
theme_bw()
Bread_df$month <- as.factor(Bread_df$month)
Bread_df %>%
mutate(Month=as.factor(Bread_df$month(date))) %>%
group_by(Bread_df$month) %>%
summarise(Transactions=n_distinct(Transaction)) %>%
ggplot(aes(x=Bread_df$month, y=Transactions)) +
geom_bar(stat="identity", fill="mistyrose2", show.legend=FALSE, colour="black") +
geom_label(aes(label=Transactions)) +
labs(title="Transactions per month") +
theme_bw()
freq.items<-eclat(Bread_df, parameter=list(supp=0.01, maxlen=5))
inspect(freq.items)
freq.items<-eclat(Bread_df, parameter=list(supp=0.05, maxlen=5))
inspect(freq.items)
freq.rules<-ruleInduction(freq.items, Bread_df, confidence=0.1)
library(splitstackshape)
# Importing Required Libraries
library(dplyr)
library(plyr)
library(ggplot2)
library(arules)
library(arulesViz)
library(knitr)
library(tidyverse)
library(lubridate)
library(gridExtra)
library(data.table)
library(splitstackshape)
# Loading the Dataset
Bread_df <- read.csv("F:/Salford Uni/CourseWork/ASDM/Task 2/bread basket.csv")
View(Bread_df)
View(Bread_df)
dim(Bread_df)
str(Bread_df)
summary(Bread_df)
Bread_df[,colSums(is.na(Bread_df)) > 0]
View(Bread_df)
# Ten most popular items sold by the bakery
x <- as.data.frame(plyr::count(Bread_df, 'Item'))
x <- x %>% arrange(desc(freq))
x[1:10,]
# Most popular period of day for bakery sale
y <- as.data.frame(plyr::count(Bread_df, 'period_day'))
y <- y %>% arrange(desc(freq))
y
# Breaking down date_time column in date column, time coulumn, year column, month column and day column
temp <- as.POSIXlt(Bread_df$date_time, format="%d-%m-%Y %H:%M")
Bread_df$year <- year(temp)
Bread_df$month <- month(temp)
Bread_df$date <- date(temp)
Bread_df$time <- as.ITime(temp, format = "%H:%M")
Bread_df$day <- weekdays(date(temp))
Bread_df$month <- month.abb[Bread_df$month]
head(Bread_df)
ggplot(data=Bread_df, aes(x = weekday_weekend)) +
geom_bar(color= "black",fill="deeppink4") +
ggtitle("Transaction Data for Weekday and Weekend")
ggplot(Bread_df, aes(x=weekday_weekend, fill = period_day)) +
scale_fill_manual(values=c("darkmagenta","lightsalmon","forestgreen","darkred"))+
geom_bar(position = "dodge") +
ggtitle("Transaction Data for Weekday and Weekend")
#Creating an item list and converting data into transaction data
Bread_df <- Bread_df[complete.cases(Bread_df),]
Bread_df$Transaction <- as.numeric(Bread_df$Transaction)
Bread_df_sorted <- Bread_df[order(Bread_df$Transaction), ]
# Write to csv file
write.csv(itemlist, "F:/Salford Uni/CourseWork/ASDM/Task 2/bread_basket.csv", quote = FALSE,row.names = TRUE)
itemlist <- ddply(Bread_df, c("Transaction"),
function(df1)paste(df1$Item, collapse = ","))
itemlist$Transaction <- NULL
colnames(itemlist) <- c("items")
# IMPORT AS TRANSACTION
trans <- read.transactions("F:/Salford Uni/CourseWork/ASDM/Task 2/bread_basket.csv",format = "basket", sep = ",")
trans
#Absolute Item Frequency Plot
itemFrequencyPlot(trans, topN=15, type="absolute", col=rainbow(15),xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
# Relative Item Frequency Plot
itemFrequencyPlot(trans, topN=15, type="relative", col=rainbow(15), xlab="Item name",
ylab="Frequency (relative)", main="Relative Item Frequency Plot")
# Inspecting the data for further analysis
cat("No of baskets:", length(trans)) # concatenate string & integer value
cat("No of unique items:", sum(size(trans)))
head(itemInfo(trans))
itemFrequencyPlot(trans, topN = 10 ,col=rainbow(10))
# Apriori algorithm with a support level of 10%
for (i in 1:length(confidenceLevels)) {
rules_sup10[i] <- length(apriori(trans, parameter=list(sup=supportLevels[1],
conf=confidenceLevels[i], target="rules")))
}
# Support and confidence values
supportLevels <- c(0.1, 0.05, 0.01, 0.005)
confidenceLevels <- c(0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1)
# Empty integers
rules_sup10 <- integer(length=9)
rules_sup5 <- integer(length=9)
rules_sup1 <- integer(length=9)
rules_sup0.5 <- integer(length=9)
# Apriori algorithm with a support level of 10%
for (i in 1:length(confidenceLevels)) {
rules_sup10[i] <- length(apriori(trans, parameter=list(sup=supportLevels[1],
conf=confidenceLevels[i], target="rules")))
}
# Number of rules found with a support level of 10%
plot1 <- qplot(confidenceLevels, rules_sup10, geom=c("point", "line"),
xlab="Confidence level", ylab="Number of rules found",
main="Apriori with a support level of 10%") +
theme_bw()
# Number of rules found with a support level of 5%
plot2 <- qplot(confidenceLevels, rules_sup5, geom=c("point", "line"),
xlab="Confidence level", ylab="Number of rules found",
main="Apriori with a support level of 5%") +
scale_y_continuous(breaks=seq(0, 10, 2)) +
theme_bw()
# Number of rules found with a support level of 1%
plot3 <- qplot(confidenceLevels, rules_sup1, geom=c("point", "line"),
xlab="Confidence level", ylab="Number of rules found",
main="Apriori with a support level of 1%") +
scale_y_continuous(breaks=seq(0, 50, 10)) +
theme_bw()
# Number of rules found with a support level of 0.5%
plot4 <- qplot(confidenceLevels, rules_sup0.5, geom=c("point", "line"),
xlab="Confidence level", ylab="Number of rules found",
main="Apriori with a support level of 0.5%") +
scale_y_continuous(breaks=seq(0, 130, 20)) +
theme_bw()
# Subplot
grid.arrange(plot1, plot2, plot3, plot4, ncol=2)
# Number of rules found with a support level of 10%, 5%, 1% and 0.5%
ggplot(data=num_rules, aes(x=confidenceLevels)) +
# Plot line and points (support level of 10%)
geom_line(aes(y=rules_sup10, colour="Support level of 10%")) +
geom_point(aes(y=rules_sup10, colour="Support level of 10%")) +
# Plot line and points (support level of 5%)
geom_line(aes(y=rules_sup5, colour="Support level of 5%")) +
geom_point(aes(y=rules_sup5, colour="Support level of 5%")) +
# Plot line and points (support level of 1%)
geom_line(aes(y=rules_sup1, colour="Support level of 1%")) +
geom_point(aes(y=rules_sup1, colour="Support level of 1%")) +
# Plot line and points (support level of 0.5%)
geom_line(aes(y=rules_sup0.5, colour="Support level of 0.5%")) +
geom_point(aes(y=rules_sup0.5, colour="Support level of 0.5%")) +
# Labs and theme
labs(x="Confidence levels", y="Number of rules found",
title="Apriori algorithm with different support levels") +
theme_bw() +
theme(legend.title=element_blank())
# Data frame
num_rules <- data.frame(rules_sup10, rules_sup5, rules_sup1, rules_sup0.5, confidenceLevels)
# Number of rules found with a support level of 10%, 5%, 1% and 0.5%
ggplot(data=num_rules, aes(x=confidenceLevels)) +
# Plot line and points (support level of 10%)
geom_line(aes(y=rules_sup10, colour="Support level of 10%")) +
geom_point(aes(y=rules_sup10, colour="Support level of 10%")) +
# Plot line and points (support level of 5%)
geom_line(aes(y=rules_sup5, colour="Support level of 5%")) +
geom_point(aes(y=rules_sup5, colour="Support level of 5%")) +
# Plot line and points (support level of 1%)
geom_line(aes(y=rules_sup1, colour="Support level of 1%")) +
geom_point(aes(y=rules_sup1, colour="Support level of 1%")) +
# Plot line and points (support level of 0.5%)
geom_line(aes(y=rules_sup0.5, colour="Support level of 0.5%")) +
geom_point(aes(y=rules_sup0.5, colour="Support level of 0.5%")) +
# Labs and theme
labs(x="Confidence levels", y="Number of rules found",
title="Apriori algorithm with different support levels") +
theme_bw() +
theme(legend.title=element_blank())
# Apriori algorithm execution with a support level of 1% and a confidence level of 50%
rules_sup1_conf50 <- apriori(trans, parameter=list(sup=supportLevels[3],
conf=confidenceLevels[5], target="rules"))
# Association rules
inspect(rules_sup1_conf50)
# Scatter plot
plot(rules_sup1_conf50, measure=c("support","lift"), shading="confidence")
# Parallel coordinates plot
plot(rules_sup1_conf50, method="paracoord", control=list(reorder=TRUE))
# Graph
plot(rules_sup1_conf50, method="graph")
# Graph
plot(rules_sup1_conf50, method="graph", control=list(layout=igraph::in_circle()))
# Grouped matrix plot
plot(rules_sup1_conf50, method="grouped")
# Rules for Coffee
coffee_rules <- apriori(data=trans,  parameter=list(supp=0.01, conf = 0.5, target="rules"), appearance = list(default="lhs", rhs="Coffee"), control=list(verbose=F))
coffee_rules_byconf <- sort(coffee_rules, by="confidence", decreasing=TRUE)
inspect(coffee_rules_byconf)
plot(coffee_rules, method="graph", cex=0.7, shading="lift",control=list(col=rainbow(7)))# graph based on confidence
plot(coffee_rules , method="paracoord")# parallel coordinates plot based on support
# Apriori algorithm execution with a support level of 0.5% and a confidence level of 10%
rules_sup0.5_conf10 <- apriori(trans, parameter=list(sup=supportLevels[4], conf=confidenceLevels[9], target="rules"))
# Graph
plot(rules_sup0.5_conf10, method="graph", control=list(layout=igraph::in_circle()))
# Parallel coordinates plot
plot(rules_sup0.5_conf10, method="paracoord", control=list(reorder=TRUE))
# Grouped matrix plot
plot(rules_sup0.5_conf10, method="grouped")
# Scatter plot
plot(rules_sup0.5_conf10, measure=c("support","lift"), shading="confidence", jitter=0)
freq.items<-eclat(Bread_df, parameter=list(supp=0.01, maxlen=5))
inspect(freq.items)
freq.items<-eclat(Bread_df, parameter=list(supp=0.05, maxlen=5))
# loading data
online <- read.xlsx("I:/Salford/Gulam/ASDM/Task2/online retail.xlsx")
# Libraries
library(readxl)    # To read excel file
library(tidyverse) # data manipulation
library(dplyr)     # Used for data manipulation challenges
library(ggplot2)   # create complex plots from data in a data frame
library(arules)    # Mining Association Rules and Frequent Itemsets with R
library(arulesViz) # Visualizing Association Rules and Frequent Itemsets
# loading data
online <- read.xlsx("I:/Salford/Gulam/ASDM/Task2/online retail.xlsx")
# loading data
online <- read.xlsx("I:/Salford/Gulam/ASDM/Task2/Online Retail.xlsx")
# Libraries
library(readxl)    # To read excel file
# loading data
online <- read.xlsx("I:/Salford/Gulam/ASDM/Task2/Online Retail.xlsx")
# loading data
online <- read_xlsx("I:/Salford/Gulam/ASDM/Task2/Online Retail.xlsx")
online
df <- retail %>% select(invoiceno, description) %>% mutate(description = str_trim(description,
side = "both")) %>% mutate(invoiceno = factor(invoiceno), description = str_replace_all(description,
"[']", replacement = "")) %>% mutate(description = tolower(str_replace_all(description,
pattern = "[ ]", replacement = "_")))
df <- online %>% select(invoiceno, description) %>% mutate(description = str_trim(description,
side = "both")) %>% mutate(invoiceno = factor(invoiceno), description = str_replace_all(description,
"[']", replacement = "")) %>% mutate(description = tolower(str_replace_all(description,
pattern = "[ ]", replacement = "_")))
View(online)
df <- online %>% select(InvoiceNo, Description) %>% mutate(Description = str_trim(Description,
side = "both")) %>% mutate(InvoiceNo = factor(InvoiceNo), Description = str_replace_all(Description,
"[']", replacement = "")) %>% mutate(Description = tolower(str_replace_all(Description,
pattern = "[ ]", replacement = "_")))
head(df)
data <- function(x) {
y <- data.frame()
for (i in 1:n_distinct(df$InvoiceNo)) {
x <- df %>% filter(InvoiceNo == levels(InvoiceNo)[i]) %>% t() %>% as.data.frame() %>%
slice(2) %>% mutate(InvoiceNo = levels(df$InvoiceNo)[i]) %>% select(InvoiceNo,
everything())
colnames(x) <- c("InvoiceNo", paste0("item_", 1:(ncol(x) - 1)))
print(i)
y <- list(y, x) %>% rbindlist(fill = T)
}
return(y)
}
df_prep <- data()
data <- function(x) {
y <- data.frame()
for (i in 1:n_distinct(df$InvoiceNo)) {
x <- df %>% filter(InvoiceNo == levels(InvoiceNo)[i]) %>% t() %>% as.data.frame() %>%
slice(2) %>% mutate(InvoiceNo = levels(df$InvoiceNo)[i]) %>% select(InvoiceNo,
everything())
colnames(x) <- c("InvoiceNo", paste0("item_", 1:(ncol(x) - 1)))
print(i)
y <- list(y, x) %>% rbindlist(use.names=TRUE)
}
return(y)
}
df_prep <- data()
library(data.table)# extension of data. frame package in R
data <- function(x) {
y <- data.frame()
for (i in 1:n_distinct(df$InvoiceNo)) {
x <- df %>% filter(InvoiceNo == levels(InvoiceNo)[i]) %>% t() %>% as.data.frame() %>%
slice(2) %>% mutate(InvoiceNo = levels(df$InvoiceNo)[i]) %>% select(InvoiceNo,
everything())
colnames(x) <- c("InvoiceNo", paste0("item_", 1:(ncol(x) - 1)))
print(i)
y <- list(y, x) %>% rbindlist(use.names=TRUE)
}
return(y)
}
df_prep <- data()
data <- function(x) {
y <- data.frame()
for (i in 1:n_distinct(df$InvoiceNo)) {
x <- df %>% filter(InvoiceNo == levels(InvoiceNo)[i]) %>% t() %>% as.data.frame() %>%
slice(2) %>% mutate(InvoiceNo = levels(df$InvoiceNo)[i]) %>% select(InvoiceNo,
everything())
colnames(x) <- c("InvoiceNo", paste0("item_", 1:(ncol(x) - 1)))
print(i)
y <- list(y, x) %>% rbindlist(fill = T)
}
return(y)
}
df_prep <- data()
transaction <- as(df_prep, Class = "transactions")
LIST(head(transaction, 4))
retail <- read.transactions("I:/Salford/Gulam/ASDM/Task2/transaction retail.csv", sep = ",",
header = T)
LIST(head(retail, 4))
# Model Evaluation
rules <- apriori(retail, parameter = list(supp = 0.01, conf = 0.7))
rules_conf <- sort(rules, by = "confidence", decreasing = TRUE)
inspect(head(rules_conf))
rules_lift <- sort(rules, by = "lift", decreasing = TRUE)
inspect(head(rules_lift, 5))
subrules <- head(rules, n = 30, by = "lift")
inspect(head(subrules))
(df_prep, Class = "transactions")
(df_prep, Class = "transactions")
plot(subrules, method = "graph", measure = "lift", shading = "confidence")
df_rules <- DATAFRAME(subrules) %>% rowid_to_column("rules") %>% mutate(rules = paste("Rules",
rules), RHS = str_remove_all(string = RHS, pattern = "[{}]"))
df_rules
# Importing Required Libraries
library(ggplot2)   # create complex plots from data in a data frame
library(arules)    # Mining Association Rules and Frequent Itemsets with R
library
library(arulesViz) # Visualizing Association Rules and Frequent Itemsets
# Loading the Data-set
data <- read.csv("I:/Salford/Lavanya/ASDM/Task-2/Bank.csv")
# Loading the Data-set
data <- read.csv("I:/Salford/Lavanya/ASDM/Task-2/bread basket.csv")
head(data)
print(length(unique(data$Transaction)))
print(length(unique(data$Item)))
df<-read.transactions("I:/Salford/Lavanya/ASDM/Task-2/bread basket.csv", format="single", sep=",", cols=c("TransactionNo","Items"), header=TRUE)
df<-read.transactions("I:/Salford/Lavanya/ASDM/Task-2/bread basket.csv", format="single", sep=",", cols=c("Transaction","Item"), header=TRUE)
itemFrequencyPlot(df, topN=10, type="relative", main="Items Frequency", cex.names=0.8)
# Eclat Algorithm
eclat_alg <- eclat(df, parameter=list(supp=0.05, maxlen=9))
inspect(eclat_alg)
rules <- ruleInduction(eclat_alg, df, confidence=0.25)
inspect(rules)
rules1 <-apriori(df, parameter=list(supp=0.01, conf=0.5))
rules.by.conf<-sort(rules1, by="lift", decreasing=TRUE)
inspect(head(rules.by.conf))
plot(rules.by.conf, method="grouped")
plot(rules.by.conf, method="graph", shading="lift")
df.sel<-df[,itemFrequency(df)>0.05]
d.jac.i<-dissimilarity(df.sel, which="items")
round(d.jac.i,2)
